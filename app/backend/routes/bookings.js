// routes/bookings.js
import express from "express";
import Booking from "../models/Booking.js";
import User from "../models/User.js";
import jwt from "jsonwebtoken";
import { sendSMS } from "../utils/sms.js"; // <-- –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–º—è
import axios from "axios";
import dotenv from "dotenv";
dotenv.config();

const router = express.Router();

// GET /api/bookings - —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
router.get("/", (req, res) => {
  res.send("–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç, –º–∞—Ä—à—Ä—É—Ç GET /api/bookings –∞–∫—Ç–∏–≤–µ–Ω");
});

// POST /api/bookings
// body: { name, phone, service, date, time, createAccount (bool) }
router.post("/", async (req, res) => {
  try {
    const { name, phone, service, date, time, createAccount } = req.body;
    let userId = null;

    // –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–æ–∫–µ–Ω
    const auth = req.headers.authorization;
    if (auth) {
      try {
        const token = auth.split(" ")[1];
        const data = jwt.verify(token, process.env.JWT_SECRET);
        userId = data.id;
      } catch (e) {
        console.warn("JWT verification failed:", e.message);
      }
    }

    // –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ createAccount=true ‚Üí —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (unverified)
    if (!userId && createAccount) {
      let user = await User.findOne({ phone });
      if (!user) {
        // –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
        const tmpPass = Math.random().toString(36).slice(2, 10);
        user = new User({
          name,
          phone,
          passwordHash: tmpPass,
          verified: false
        });
        await user.save();
      }
    }

    // –°–æ–∑–¥–∞—ë–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    const booking = new Booking({
      name,
      phone,
      service,
      date,
      time,
      user: userId || null
    });
    await booking.save();

    // –û—Ç–ø—Ä–∞–≤–∫–∞ SMS –∫–ª–∏–µ–Ω—Ç—É
    try {
      await sendSMS(phone, `–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: ${service}, ${date} ${time}`); // <-- –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–º—è
    } catch (e) {
      console.warn("SMS failed:", e.message);
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    try {
      const message = `üßæ –ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:
üë§ –ò–º—è: ${name}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
üßπ –£—Å–ª—É–≥–∞: ${service}
üïí –í—Ä–µ–º—è: ${time}
üìÖ –î–∞—Ç–∞: ${date}`;
      
      await axios.post(
        `https://api.telegram.org/bot${process.env.BOT_TOKEN}/sendMessage`,
        {
          chat_id: process.env.CHAT_ID,
          text: message
        }
      );
    } catch (e) {
      console.warn("Telegram send failed:", e.message);
    }

    res.status(201).json({ ok: true, booking });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è" });
  }
});

export default router;
